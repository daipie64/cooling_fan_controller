substitutions:
  dallas_address: "0xcd3c78e381676b28"

esphome:
  name: fan-victron-orion-dc-charger
  friendly_name: Cooling Fan for Victron Orion DC Charger

esp8266:
  board: d1_mini

# Enable logging
logger:
  level: ERROR
  logs:
    dallas.sensor: none
    number: none
    sensor: none
    light: none
    fan: none

# Enable Home Assistant API
api:
  encryption:
    key: "pD5POkoUsLKZhs7/l82lh75II3wDsQoCku6tOaoyf/U="

ota:
  - platform: esphome
    password: "dc069ead6a1cfadd028cb54c7418c0a7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Fan-Victron-Orion-Dc-Charger"
    password: "cVZ8rJwFDoWT"

captive_portal:

number:
  # Slider to set Min Temperature to start fan
  - platform: template
    id: fan_threshold
    name: Threshold Temperature
    optimistic: True
    min_value: 20
    max_value: 60
    initial_value: 25
    step: 1
    restore_value: true # Store setting between reboots

  # # Home Assistant Slider for Temperature Update Interval
  # - platform: homeassistant
  #   entity_id: input_number.temperature_update_interval
  #   id: update_interval
  #   internal: true  # Not exposed as a sensor in ESPHome

globals:
  # track whether the fan was previously off, and give it a one-time kick when it starts
  - id: fan_started
    type: bool
    restore_value: no
    initial_value: 'false'

# update interval will be every 60 seconds whilst the fan is off,
# 2 seconds whilst we are kick starting the fan
# then 5 seconds whilst te fan is running
  - id: last_interval
    type: int
    restore_value: no
    initial_value: '60000'  # ms (60s)

# DS18B20 Temperature Sensor
one_wire:
  - platform: gpio
    # pin: D3
    pin: GPIO0

sensor:
  # Fan Speed Sensor (Reports % Speed to Home Assistant)
  - platform: template
    name: "Fan Speed"
    id: fan_speed_sensor
    unit_of_measurement: "%"
    accuracy_decimals: 0
    
  # Update Interval (Reports interval to Home Assistant)
  - platform: template
    name: "Update Interval"
    id: update_interval
    unit_of_measurement: "s"
    accuracy_decimals: 0
    
  # DHT11 Ambient Temperature Sensor
  - platform: dht
    pin: D4  # GPIO2
    model: DHT11
    temperature:
      name: "Ambient Temperature"
      id: ambient_temp
    humidity:
      name: "Ambient Humidity"
      id: ambient_humidity
    update_interval: 5s

  # Dallas DS18B20 Victron Orion DC Charger Temperature Sensor
  - platform: dallas_temp
    address: $dallas_address
    name: "Victron Charger Temp"
    id: charger_temp
    update_interval: 5s
    setup_priority: -100

    # Adjust fan speed(1-100%). Else, turn it off and set the speed to 1
    on_value:
      - lambda: |-
          float temp = id(charger_temp).state;
          float threshold = id(fan_threshold).state;
          float speed = 0.0;

          if (temp >= threshold) {
            if (!id(fan_started)) {
              // Kickstart the fan with 100% power for 2 seconds
              id(fan_pwm_output).set_level(1.0);
              id(fan_speed_sensor).publish_state(100.0);
              id(fan_started) = true;
              delay(2000);  // Wait 2 seconds before continuing
            }

            // Scale speed from 20% at threshold to 100% at 40Â°C
            float slope = (1.0 - 0.2) / (40.0 - threshold);
            speed = 0.2 + slope * (temp - threshold);
            if (speed > 1.0) speed = 1.0;
          } else {
            id(fan_started) = false;  // Reset flag when temp falls below threshold
          }

          id(fan_pwm_output).set_level(speed);
          id(fan_speed_sensor).publish_state(speed * 100.0);
          id(charger_temp).set_update_interval(100000);


# PWM Control via MOSFET
output:
  - platform: esp8266_pwm
    pin: D2  # GPIO4 (MOSFET Gate)
    frequency: 20kHz # 20kHz should be outside hearing range
    id: fan_pwm_output

# Fan Speed Automation (Dynamic Speed Based on Temperature)
fan:
  - platform: speed
    output: fan_pwm_output
    name: "Cooling Fan"
    id: cooling_fan



